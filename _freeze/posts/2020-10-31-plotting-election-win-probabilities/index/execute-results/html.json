{
  "hash": "260b538a5cae6a49b5c0c98e4c869691",
  "result": {
    "markdown": "---\ntitle: \"Mapping Election Win Probabilities\"\ndescription: |\n  I show how to create a election map using ggplot2\nauthor:\n  - name: Ashwin Malshe\n    url: https://business.utsa.edu/faculty/ashwin-malshe/\ndate: \"10-31-2020\"\ncategories: [Elections, Map]\n---\n\n\n\n\nIn this post, I will show you how to make a map using `ggplot2`. For this, I am going to use an excellent [post](https://statmodeling.stat.columbia.edu/2020/10/24/reverse-engineering-the-problematic-tail-behavior-of-the-fivethirtyeight-presidential-election-forecast) by Andrew Gelman.\n\nFivethirtyeight daily updates the probabilities of Trump and Biden wins based on multiple polls and their own model.[^1] They also make available their simulation outcomes as a json file. Next, I merged the cleaned simulation data with US map data. I will create a separate post to show you how to read, clean, and merge these data sets.\n\n[^1]: You can check out the maps and other information on their website: <https://projects.fivethirtyeight.com/trump-biden-election-map/>\n\n## Read the data sets and load packages\n\nI have saved all the required data sets as a `.rda` file on Github. You can directly read them into your R code without saving it first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(url(\"https://github.com/ashgreat/DA6233/blob/master/sim-elect.rda?raw=true\"))\n```\n:::\n\n\nI will use `ggrepel` package to make sure that the state labels don't overlap. If you don't have this package installed, run `install.packages(\"ggrepel\")` in the RStudio console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.3     ✔ purrr   1.0.2\n✔ tibble  3.2.1     ✔ dplyr   1.1.3\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 0.5.2\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggrepel)\n```\n:::\n\n\n## Making the map\n\nNow we are ready to make the map. We will use `trump_wins` data set. This data set has results of 40,000 simulations. Each simulation shows whether Trump will win or lose a state. There are results for 50 states and Washington D.C. There are five more results for, what I think is, regional data. We will not use those results.\n\nTrump probability of winning each state is simply the column means of this data set. In the following code the first four lines calculate the probabilities and restructure the data so that it is easier to merge with the data on maps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt <- trump_wins %>% \n  summarize(across(everything(), mean)) %>%\n  mutate(across(everything(), ~ round(.x * 100, 2))) %>% \n  pivot_longer(cols = everything(), names_to = \"state_abb\", values_to = \"prob\") %>% \n  inner_join(select(state_names, -lat, -long), by = \"state_abb\") %>% \n  inner_join(fifty_states, by = c(\"state_low\" = \"id\"))\n```\n:::\n\n\nFinally, we create a map using `dt`. The labels of the states are split into two groups. Many northeastern states show up small on the map so their names are no readable easily. Therefore, we need to show them a little bit away from the map. For this we will use `geom_text_repel()` function from `ggrepel` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt %>%\n  ggplot(aes(x = long, y = lat)) +\n  geom_polygon(aes(group = group, fill = prob), color = \"#d8dee9\", linewidth = 0.05) +\n  geom_text(data = filter(state_label, \n                          !state_abb %in% c(\"MA\", \"RI\", \"CT\", \"NJ\", \"DE\", \"DC\", \"MD\")), \n            aes(label = state_abb), \n            size = 3, hjust = 0.5, family = \"Roboto Condensed\") +\n  geom_text_repel(data = filter(state_label, \n                                state_abb %in% c(\"MA\", \"RI\", \"CT\", \"NJ\", \"DE\", \"DC\", \"MD\")),\n                  aes(label = state_abb), \n                  nudge_x = 5, \n                  segment.size  = 0.2, \n                  segment.color = \"grey50\",\n                  direction     = \"y\", \n                  size = 3, \n                  hjust = 0.5, \n                  family = \"Roboto Condensed\") +\n  coord_map(projection = \"albers\", lat0 = 39, lat1 = 45) +\n  scale_fill_gradient2(low = \"#0063c4\", \n                       mid = \"#d8dee9\", \n                       high = \"#ef2e69\",\n                       midpoint = 50,\n                       labels = c(\"0%\", \"25%\", \"50%\", \"75%\", \"100%\"),\n                       guide = guide_colorbar(barwidth = 10, \n                                              barheight = 0.4,\n                                              title.position = \"top\")) + \n  labs(fill = \"Probability of Trump Winning a State\") +\n  ggthemes::theme_map() +\n  theme(legend.position = c(0.3, -0.2),\n        legend.direction= \"horizontal\",\n        legend.title = element_text(family = \"Roboto Condensed\")) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=768}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}