{
  "hash": "aca93f9dcb6086551940c34a123cc3bd",
  "result": {
    "markdown": "---\ntitle: \"Donut Chart and Geofacets\"\ndescription: |\n  How to combine a donut chart with geofacets in R.\ndate: \"2020-11-19\"\n---\n\n\n\n\nThere are many different ways people have visualized US presidential elections results on the US map. One critical drawback in many of these visualizations is that they show only the results for the winners. I wanted to show the vote percentages for Biden, Trump, and other candidates. These can be easily captured using a pie chart or a donut chart. However, superimposing the charts on the US map is difficult because the sizes of the states vary quite a lot. So I decided to use the fantastic `geofacet` package, which makes this task easy.\n\n## Getting the data\n\nAs of the date of this writing (21st November 2020), the results of the US Presidential elections have not tallied. The counting is still going on in a few states. However, it is unlikely that the results will change significantly from this point onward. I decided to get data from this Github repo, which scrapes data from NYT. The data is at county-level: https://github.com/favstats/USElection2020-NYT-Results\n\nI am reading the data directly into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt <- readr::read_csv(\"https://bit.ly/2UO2Zyp\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Cleaning up the data\n\nI clean up the data in multiple steps using `dplyr`:\n\n1.  Get total votes and absentee votes for all the contentstansts other than Trump and Biden.\n2.  `state` names have `-` in place of a space. For instance, New York is written \"as new-york\". Replace all the hyphens with spaces.\n3.  Use title case for all the state names. This screws up District of Columbia by capitalizing \"O\" in of. Fix that.\n4.  Summarize the votes at the state level.\n5.  Reshape the data using `pivot_longer`. This will lead to only five columns.\n6.  Finally, calculate the percentage votes.\n\n:::{.column-margin}\nAbsentee votes for some states were negative so I decided not to use absentee votes in any visualization.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the libraries\npacman::p_load(tidyverse, showtext, geofacet)\n\ndt2 <- dt %>% \n  mutate(\n         Others = votes  - (results_trumpd + results_bidenj),\n         Others_ab = absentee_votes - (results_absentee_trumpd + results_absentee_trumpd),\n         state = stringr::str_replace_all(state, \"-\", \" \"),\n         state = stringr::str_to_title(state),\n         state = ifelse(state == \"District Of Columbia\", \"District of Columbia\",  state)\n         ) %>% \n  group_by(state) %>% \n  summarize(Trump_votes = sum(results_trumpd, na.rm = TRUE),\n            Trump_abvotes = sum(results_absentee_trumpd, na.rm = TRUE),\n            Biden_votes = sum(results_bidenj, na.rm = TRUE),\n            Biden_abvotes = sum(results_absentee_bidenj, na.rm = TRUE),\n            Others_votes = sum(Others , na.rm = TRUE),\n            Others_abvotes = sum(Others_ab , na.rm = TRUE),\n            .groups = \"drop\") %>% \n  pivot_longer(cols = c(Trump_votes, Biden_votes, Others_votes,\n                        Trump_abvotes, Biden_abvotes, Others_abvotes),\n               names_to = c(\"Candidate\", \".value\"),\n               names_pattern = \"(.+)_(.+)\") %>% \n  group_by(state) %>% \n    mutate(per_votes = votes / sum(votes)) %>% \n  ungroup()\n```\n:::\n\n\n## Creating the plots\n\nI am starting off by importing Proxima Nova Condensed font. If you don't have this font, use whichever font you like. I recommend using a condensed font. A popular alternative is Robot Condensed.\n\nI also start `showtext`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfont_add(\"proxima\", here::here(\"Icons\", \"ProximaNovaCond-Regular.otf\"))\nshowtext_auto()\n```\n:::\n\n\nNow we are reading to create the plot. Recall that I am overlaying donut charts on the US map but instead of actually using the map, I will instead use `geofacet` package. This allows us to position facets in the general location of states on the US map.\n\nI like this package because due to the distortion introduced by the map projections, many states on the US map look smaller than they are. A few states are indeed small. Also, Alaska and Hawaii are so far away from the continental US that it becomes difficult to show them in one map unless we make some adjustments.\n\nI will show you two different methods to create this graph.\n\n### Method 1\n\nIn this method, I will first create a bar graph and then use polar coordinates to convert them into a pie chart. Next, using `xlim()` function, I will convert the pie chart into a donut chart. Play around with the values inside `xlim` in the code below to see how the plot changes.\n\nThis plot will not put the vote percentages as labels on the plot, which will make the plots a bit less interesting. In the next method I will show you how to put the value labels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng1 <- dt2 %>% \n  group_by(state) %>% \n  arrange(Candidate) %>% \n  ungroup() %>% \n  ggplot(aes(x = 1.4, y = per_votes, fill = Candidate)) +\n  geom_col(color = \"white\", width = 0.7) +\n  coord_polar(theta = \"y\", start = 0) +\n  facet_geo(~state) +\n  scale_fill_manual(values = c(\"#0066f2\", \"#e9c41d\", \"#ff0000\")) +\n  theme_void()+\n  xlim(0, 2) +\n  labs(caption = \"Ashwin Malshe \\nhttps://dataviz.school\",\n       subtitle = \" \") +\n  theme(legend.text = element_text(family = \"proxima\", size = 10),\n        legend.title = element_blank(),\n        legend.direction = \"horizontal\",\n        legend.position = c(0.2, 1),\n        plot.caption = element_text(family = \"proxima\", size = 10, hjust = 0.95,\n                                    margin = margin(0, 0, 5, 0, \"pt\"),\n                                    face = \"bold\", color = \"#1500f4\"),\n        strip.text = element_text(family = \"proxima\", size = 9,\n                                  margin = margin(0, 0, 5, 0, \"pt\"))) \n\n# Print the plot\ng1\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=1056}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nIf you like it, save the plot using `ggsave()` function.\n\n### Method 2\n\nIn the second method, I will use `geom_rect` to add rectangles first and then use polar coordinates to create a pie chart. Once again he limits specified inside `xlim()` will convert it into a donut chart.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng2 <- dt2 %>% \n  group_by(state) %>% \n  arrange(Candidate) %>% \n  mutate(ymax = cumsum(per_votes),\n         ymin = ifelse(row_number() == 1, 0, lag(ymax)),\n         ypos = (ymin + ymax) / 2,\n         ypos = ifelse(state == \"District of Columbia\" & Candidate == \"Trump\",\n                       0.05, ypos)) %>% \n  ungroup() %>% \n  ggplot(aes(ymin = ymin, ymax = ymax, xmin = 3, xmax = 4, fill = Candidate)) +\n  geom_rect() +\n  geom_text(x = 1.8, \n             aes(y = ypos, label = formattable::percent(round(per_votes, 2), digits = 0)),\n             size = 2) +\n  coord_polar(theta = \"y\") +\n  facet_geo(~state) +\n  scale_fill_manual(values = c(\"#0066f2\", \"#e6f1fd\", \"#ff0000\")) +\n  theme_void()+\n  xlim(-1, 4) +\n  labs(caption = \"Ashwin Malshe \\nhttps://dataviz.school\",\n       subtitle = \" \") +\n  theme(legend.text = element_text(family = \"proxima\", size = 10),\n        legend.title = element_blank(),\n        legend.direction = \"horizontal\",\n        legend.position = c(0.2, 1),\n        plot.caption = element_text(family = \"proxima\", size = 10, hjust = 0.95,\n                                    margin = margin(0, 0, 5, 0, \"pt\"),\n                                    face = \"bold\", color = \"#1500f4\"),\n        strip.text = element_text(family = \"proxima\", size = 9,\n                                  margin = margin(0, 0, 5, 0, \"pt\")))\n\n\n# Print the plot\n\ng2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=1056}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nAnother version of the same plot with a different background.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng3 <- dt2 %>% \n  group_by(state) %>% \n  arrange(Candidate) %>% \n  mutate(ymax = cumsum(per_votes),\n         ymin = ifelse(row_number() == 1, 0, lag(ymax)),\n         ypos = (ymin + ymax) / 2,\n                  ypos = ifelse(state == \"District of Columbia\" & Candidate == \"Trump\",\n                       0.05, ypos)) %>% \n  ungroup() %>% \n  ggplot(aes(ymin = ymin, ymax = ymax, xmin = 3, xmax = 4, fill = Candidate)) +\n  geom_rect() +\n  geom_text(x = 1.8, \n             aes(y = ypos, \n                 label = formattable::percent(round(per_votes, 2), digits = 0)),\n             size = 2, color = \"white\") +\n  coord_polar(theta = \"y\") +\n  facet_geo(~state) +\n  scale_fill_manual(values = c(\"#0066f2\", \"#e6f1fd\", \"#ff0000\")) +\n  theme_void()+\n  xlim(-1, 4) +\n  labs(caption = \"Ashwin Malshe \\nhttps://dataviz.school\",\n       subtitle = \" \") +\n  theme(legend.text = element_text(family = \"proxima\", size = 10, color = \"white\"),\n        legend.title = element_blank(),\n        legend.direction = \"horizontal\",\n        legend.position = c(0.2, 1),\n        plot.caption = element_text(family = \"proxima\", size = 10, hjust = 0.95,\n                                    margin = margin(0, 0, 5, 0, \"pt\"),\n                                    face = \"bold\", color = \"#a3be8c\"),\n        strip.text = element_text(family = \"proxima\", size = 9, color = \"white\",\n                                  margin = margin(0, 0, 5, 0, \"pt\")),\n        plot.background = element_rect(fill = \"#2e3440\", color = NA),\n        panel.background = element_rect(fill = \"#2e3440\", color = NA) )\n\n\n# Print the plot\n\ng3\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=1056}\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}