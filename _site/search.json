[
  {
    "objectID": "posts/2023-10-28-installing-r-and-rstudio/index.html",
    "href": "posts/2023-10-28-installing-r-and-rstudio/index.html",
    "title": "Installing R and RStudio",
    "section": "",
    "text": "This a short tutorial for the incoming students of UTSA’s MS in Data Analytics program. I am going to assume that the reader has no knowledge of R and RStudio, the Integrated Development Environment (IDE), which we use to code.\n\nIf you are a Mac user and you are comfortable with command line tools using Terminal, I suggest taking more systematic route for preparing your MacOS for R installation using Homebrew. Instructions are available here. Otherwise, just follow the instructions below like everyone else!\n\n\n\nR is available for download for Linux, MacOS, and Windows from this link: https://cloud.r-project.org. The latest version of R is 4.2.1 as of 08 August 2022. This is going to be a large download (about 70 MB) so make sure that you have enough space on the hard drive. Also, note that the final installation will take even more space.\nIf you are using older versions of Mac OSX (El Capitan, Mavericks, etc.), you will find your installation files in the sub-directories from this page: https://cloud.r-project.org\nOnce you install R, you can launch it to see whether the installation is fine. On my Mac, once launched, R looks like this:\n\n\n\n\n\n\n\nNext we download RStudio IDE. RStudio needs R installation to function so please make sure that you have successfully followed Steps 1 through 3 above.\n\nThe latest stable version of RStudio as of 08 August 2022 is 2022.07.1+554. It can be obtained for all the operating systems from this link: https://www.rstudio.com/products/rstudio/download/#download. Again, the file size is large so make sure that you have enough space on the computer.\n\nOnce you download RStudio, install the software by opening the exe file for Windows and dmg file for Mac. The installation will be smooth. Just follow the directions, if any, on the screen.\n\nOnce you launch it you will see a window similar to mine:\n\n\n\n\n\n\nIf RStudio locates the R installation, everything is fine. Otherwise, uninstall both R and RStudio and reinstall them in the order outlined above. RStudio looks similar to Matlab in case you have used it before. There is a lot of customization possible for RStudio. You can check that out from Tools/Global Options menu."
  },
  {
    "objectID": "posts/2021-09-27-kiyosaki/index.html",
    "href": "posts/2021-09-27-kiyosaki/index.html",
    "title": "Kiyosaki Predicting Stock Market Crash",
    "section": "",
    "text": "Robert Kiyosaki is a the bestselling author of many personal finance books, most notably Rich Dad Poor Dad. But being good at personal finance doesn’t mean that he is good at predicting stock market! Over the last 1.5 years, Kiyosaki has warned at least 19 times about an impending stock market crash. As it happens, many of his predictions were made at the bottom of the market. As such, if you followed his advice to move to cash, you would have lost out on the market run up.\nKiyosaki has a large fan following and enjoys strong loyalty from them. Many in the news media take his warnings seriously without looking at his past history such as this article from Entrepreneur. About a week ago, the parody #FinTwit account Dr. Parik Patel shared the following image on Twitter that annotated S&P 500 Index with Kiyosaki’s tweets about market crash.\nAlthough this visualization is pretty cool, it’s difficult to read because it’s static and has many objects on the chart. So I took this opportunity to create a interactive visualization using highcharter, highcharts, and R. In the line graph below, you can hover your mouse on the blue points to see the exact warning Kiyosaki tweeted. Enjoy playing with it!"
  },
  {
    "objectID": "posts/2021-09-27-kiyosaki/index.html#code-for-making-the-plot",
    "href": "posts/2021-09-27-kiyosaki/index.html#code-for-making-the-plot",
    "title": "Kiyosaki Predicting Stock Market Crash",
    "section": "Code for making the plot",
    "text": "Code for making the plot\nTo make the above plot, you will need two things:\n\nS&P 500 Index returns\nScreenshots of Kiyosaki’s tweets\n\nI downloaded the S&P 500 returns from Yahoo Finance. For Kiyosaki’s tweets, I searched for the terms “crash” and “crashed” on his Twitter timeline and went over the tweets that pertain to stock market crash. He has been using that word a lot for prices in many other assets like Bitcoin and gold. I did not use those tweets.\nYou can download the data set as an RDS file from my Github repository for this blog as shown below. Next you are ready to make the chart!\n\n# Read the data set\ndt &lt;- readRDS(url(\"https://github.com/ashgreat/dataviz-blog/blob/main/data/kiyosaki_crash.rds?raw=true\"))\n\n# Make the chart!\n\ndt %&gt;% \n  hchart(\"line\", hcaes(Date, Adj_Close),\n         enableMouseTracking = FALSE,\n         states = list(inactive = list(opacity = 1))) %&gt;% \n  hc_add_series(dt, \"point\", hcaes(Date, Adj_Close2)) %&gt;% \n  hc_yAxis(title = list(text = \"S&P 500 Adjusted Close\")) %&gt;% \n  hc_caption(text = '&lt;em&gt;Made by &lt;b&gt;Ashwin Malshe &lt;/b&gt; &lt;a href=\"www.dataviz.school\"&gt;www.dataviz.school&lt;/a&gt;&lt;/em&gt;') %&gt;% \n  hc_title( text = \"Kiyosaki Predicting Market Crash\") %&gt;% \n  hc_tooltip( useHTML = TRUE,\n              formatter = JS(\"function(){return(this.point.tweet_tooltip2)}\"),\n              shape = \"square\",\n              borderWidth = 0,\n              backgroundColor = NULL,\n              borderColor = NULL) %&gt;%\n  hc_add_theme(hc_theme_538())"
  },
  {
    "objectID": "posts/2021-10-04-visualization-of-monthly-nber-paper-submissions/index.html",
    "href": "posts/2021-10-04-visualization-of-monthly-nber-paper-submissions/index.html",
    "title": "Visualization of monthly NBER paper submissions",
    "section": "",
    "text": "Get the data sets from here: https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-09-28/readme.md\nAnecdotally I had heard that many economists were submitting tons of papers to NBER during the Covid-19 pandemic. However, it was not clear to me whether this was a trend or a flash in the pan. The following visualization show that the spike in 2020 was primarily in one month.\nWhich month saw the spike? This table shows that it was in May 2020. Top 6 months with highest submissions are in 2020.\nyear\nmonth\nn\n\n\n\n\n2020\n5\n223\n\n\n2020\n7\n176\n\n\n2020\n10\n168\n\n\n2020\n6\n165\n\n\n2020\n12\n156\n\n\n2020\n4\n152\n\n\n2016\n12\n143\n\n\n2013\n8\n134\n\n\n2018\n9\n134\n\n\n2015\n7\n132\nLet’s annotate the earlier plot with the spike in may 2020."
  },
  {
    "objectID": "posts/2021-10-04-visualization-of-monthly-nber-paper-submissions/index.html#sub-areas-of-economics-submitting-in-may-2020",
    "href": "posts/2021-10-04-visualization-of-monthly-nber-paper-submissions/index.html#sub-areas-of-economics-submitting-in-may-2020",
    "title": "Visualization of monthly NBER paper submissions",
    "section": "Sub-areas of Economics submitting in May 2020",
    "text": "Sub-areas of Economics submitting in May 2020\nNext, let’s visualize the top subcategories submitting in May 2020. I expected these to be from Heath Care and Heath Economics. But is that the case?\nCreate a merged data set with papers and programs\nNext get the top 10 fields by submissions in May 2020:\nTake a look at these fields\n\n\n\n\n\nprogram_desc\nn\n\n\n\n\nPublic Economics\n62\n\n\nHealth Economics\n58\n\n\nEconomic Fluctuations and Growth\n56\n\n\nLabor Studies\n47\n\n\nCorporate Finance\n34\n\n\nHealth Care\n30\n\n\nAsset Pricing\n29\n\n\nDevelopment Economics\n25\n\n\nInternational Finance and Macroeconomics\n24\n\n\nProductivity, Innovation, and Entrepreneurship\n23\n\n\n\n\n\nNow we are ready to create a bar plot.\n\n\n\n\n\nLet’s fill the first 3 bars with a different color. Also, using str_swap function from sringr package (bundled with tidyvere so you don’t have to install it separately) wrap the axis labels.\n\n\n\n\n\nHow does the distribution of the top 10 most submitted program descriptions look like? First, get the top 10 most popular programs of all times.\nWe can compare individual distributions using facet_wrap. But there is a better way to compare these distributions over time using ggridges package.\n\n\n\n\n\nAlthough almost all the top-10 fields experienced increases in 2020 submissions, International Trade and Finance related submissions were flat. Corporate Finance submissions saw a sharper bump compared to Asset Pricing, which both belong to Finance."
  },
  {
    "objectID": "posts/2020-10-31-plotting-covid-19-pandemic/index.html",
    "href": "posts/2020-10-31-plotting-covid-19-pandemic/index.html",
    "title": "Plotting Covid-19 Pandemic",
    "section": "",
    "text": "In this post, we will visualize spread of worldwide COVID-19 cases through time. I obtained the data from Rami Krispin’s website: https://ramikrispin.github.io/coronavirus/ using coronovirus package. I also decided to do some experimentation using John Coene’s fantastic echarts4r package, which allows us to access echarts API.\nLoad the libraries and get the data in the R session.\nlibrary(dplyr)\nlibrary(echarts4r)\nlibrary(coronavirus)\n\n# Get the data\ndata(\"coronavirus\")"
  },
  {
    "objectID": "posts/2020-10-31-plotting-covid-19-pandemic/index.html#data-preparation",
    "href": "posts/2020-10-31-plotting-covid-19-pandemic/index.html#data-preparation",
    "title": "Plotting Covid-19 Pandemic",
    "section": "Data Preparation",
    "text": "Data Preparation\nPrint out the first 6 observations.\n\nhead(coronavirus)\n\n        date province country     lat      long      type cases   uid iso2 iso3\n1 2020-01-22  Alberta  Canada 53.9333 -116.5765 confirmed     0 12401   CA  CAN\n2 2020-01-23  Alberta  Canada 53.9333 -116.5765 confirmed     0 12401   CA  CAN\n3 2020-01-24  Alberta  Canada 53.9333 -116.5765 confirmed     0 12401   CA  CAN\n4 2020-01-25  Alberta  Canada 53.9333 -116.5765 confirmed     0 12401   CA  CAN\n5 2020-01-26  Alberta  Canada 53.9333 -116.5765 confirmed     0 12401   CA  CAN\n6 2020-01-27  Alberta  Canada 53.9333 -116.5765 confirmed     0 12401   CA  CAN\n  code3    combined_key population continent_name continent_code\n1   124 Alberta, Canada    4413146  North America             NA\n2   124 Alberta, Canada    4413146  North America             NA\n3   124 Alberta, Canada    4413146  North America             NA\n4   124 Alberta, Canada    4413146  North America             NA\n5   124 Alberta, Canada    4413146  North America             NA\n6   124 Alberta, Canada    4413146  North America             NA\n\n\nWe are interested in date and type. Let’s take a look at the distinct values for type.\n\ncoronavirus %&gt;% count(type)\n\n       type      n\n1 confirmed 330327\n2     death 330327\n3  recovery 313182\n\n\nThere are only 3 values: confirmed, death, and recovery. Next we will create sum of cases for each of the values and store them in separate data sets.\n\ndt1 &lt;- coronavirus %&gt;% \n  filter(type == \"confirmed\") %&gt;% \n  group_by(date) %&gt;% \n  summarize(Confirmed = sum(cases, na.rm = TRUE), .groups = \"drop\")\n\ndt2 &lt;- coronavirus %&gt;% \n  filter(type == \"death\") %&gt;% \n  group_by(date) %&gt;% \n  summarize(Death = sum(cases, na.rm = TRUE), .groups = \"drop\")\n\n\ndt3 &lt;- coronavirus %&gt;% \n  filter(type == \"recovery\") %&gt;% \n  group_by(date) %&gt;% \n  summarize(Recovered = sum(cases, na.rm = TRUE), .groups = \"drop\")\n\nThere is an error in the recovery figures in 14th December 2020. So I plot only cases and deaths.\nFinally, we will merge the 2 datasets so that we will have the counts of each type in separate columns.\n\ndt &lt;- dt1 %&gt;% \n  inner_join(dt2, by = \"date\")"
  },
  {
    "objectID": "posts/2020-10-31-plotting-covid-19-pandemic/index.html#plot",
    "href": "posts/2020-10-31-plotting-covid-19-pandemic/index.html#plot",
    "title": "Plotting Covid-19 Pandemic",
    "section": "Plot",
    "text": "Plot\nFinally, time to make the plot! Note how we can build this plot in separate elements.\n\ndt %&gt;% \n  e_charts(x = date) %&gt;% \n  e_line(serie = Confirmed) %&gt;% \n  e_line(serie = Death) %&gt;% \n  e_tooltip(trigger = \"axis\") %&gt;% \n  e_datazoom(type = \"slider\") %&gt;% \n  e_title(\"Worldwide COVID-19 cases\") %&gt;% \n  e_theme(\"bee-insipired\") \n\n\n\n\n\n\nThis plot is interactive so you can hover over the plot to get the exact readings. You can also toggle time series on or off by clicking on the legends on top."
  },
  {
    "objectID": "posts/2020-10-31-plotting-election-win-probabilities/index.html",
    "href": "posts/2020-10-31-plotting-election-win-probabilities/index.html",
    "title": "Mapping Election Win Probabilities",
    "section": "",
    "text": "In this post, I will show you how to make a map using ggplot2. For this, I am going to use an excellent post by Andrew Gelman.\nFivethirtyeight daily updates the probabilities of Trump and Biden wins based on multiple polls and their own model.1 They also make available their simulation outcomes as a json file. Next, I merged the cleaned simulation data with US map data. I will create a separate post to show you how to read, clean, and merge these data sets."
  },
  {
    "objectID": "posts/2020-10-31-plotting-election-win-probabilities/index.html#read-the-data-sets-and-load-packages",
    "href": "posts/2020-10-31-plotting-election-win-probabilities/index.html#read-the-data-sets-and-load-packages",
    "title": "Mapping Election Win Probabilities",
    "section": "Read the data sets and load packages",
    "text": "Read the data sets and load packages\nI have saved all the required data sets as a .rda file on Github. You can directly read them into your R code without saving it first.\n\nload(url(\"https://github.com/ashgreat/DA6233/blob/master/sim-elect.rda?raw=true\"))\n\nI will use ggrepel package to make sure that the state labels don’t overlap. If you don’t have this package installed, run install.packages(\"ggrepel\") in the RStudio console.\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.3     ✔ purrr   1.0.2\n✔ tibble  3.2.1     ✔ dplyr   1.1.3\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 0.5.2\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(ggrepel)"
  },
  {
    "objectID": "posts/2020-10-31-plotting-election-win-probabilities/index.html#making-the-map",
    "href": "posts/2020-10-31-plotting-election-win-probabilities/index.html#making-the-map",
    "title": "Mapping Election Win Probabilities",
    "section": "Making the map",
    "text": "Making the map\nNow we are ready to make the map. We will use trump_wins data set. This data set has results of 40,000 simulations. Each simulation shows whether Trump will win or lose a state. There are results for 50 states and Washington D.C. There are five more results for, what I think is, regional data. We will not use those results.\nTrump probability of winning each state is simply the column means of this data set. In the following code the first four lines calculate the probabilities and restructure the data so that it is easier to merge with the data on maps.\n\ndt &lt;- trump_wins %&gt;% \n  summarize(across(everything(), mean)) %&gt;%\n  mutate(across(everything(), ~ round(.x * 100, 2))) %&gt;% \n  pivot_longer(cols = everything(), names_to = \"state_abb\", values_to = \"prob\") %&gt;% \n  inner_join(select(state_names, -lat, -long), by = \"state_abb\") %&gt;% \n  inner_join(fifty_states, by = c(\"state_low\" = \"id\"))\n\nFinally, we create a map using dt. The labels of the states are split into two groups. Many northeastern states show up small on the map so their names are no readable easily. Therefore, we need to show them a little bit away from the map. For this we will use geom_text_repel() function from ggrepel package.\n\ndt %&gt;%\n  ggplot(aes(x = long, y = lat)) +\n  geom_polygon(aes(group = group, fill = prob), color = \"#d8dee9\", linewidth = 0.05) +\n  geom_text(data = filter(state_label, \n                          !state_abb %in% c(\"MA\", \"RI\", \"CT\", \"NJ\", \"DE\", \"DC\", \"MD\")), \n            aes(label = state_abb), \n            size = 3, hjust = 0.5, family = \"Roboto Condensed\") +\n  geom_text_repel(data = filter(state_label, \n                                state_abb %in% c(\"MA\", \"RI\", \"CT\", \"NJ\", \"DE\", \"DC\", \"MD\")),\n                  aes(label = state_abb), \n                  nudge_x = 5, \n                  segment.size  = 0.2, \n                  segment.color = \"grey50\",\n                  direction     = \"y\", \n                  size = 3, \n                  hjust = 0.5, \n                  family = \"Roboto Condensed\") +\n  coord_map(projection = \"albers\", lat0 = 39, lat1 = 45) +\n  scale_fill_gradient2(low = \"#0063c4\", \n                       mid = \"#d8dee9\", \n                       high = \"#ef2e69\",\n                       midpoint = 50,\n                       labels = c(\"0%\", \"25%\", \"50%\", \"75%\", \"100%\"),\n                       guide = guide_colorbar(barwidth = 10, \n                                              barheight = 0.4,\n                                              title.position = \"top\")) + \n  labs(fill = \"Probability of Trump Winning a State\") +\n  ggthemes::theme_map() +\n  theme(legend.position = c(0.3, -0.2),\n        legend.direction= \"horizontal\",\n        legend.title = element_text(family = \"Roboto Condensed\"))"
  },
  {
    "objectID": "posts/2020-10-31-plotting-election-win-probabilities/index.html#footnotes",
    "href": "posts/2020-10-31-plotting-election-win-probabilities/index.html#footnotes",
    "title": "Mapping Election Win Probabilities",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou can check out the maps and other information on their website: https://projects.fivethirtyeight.com/trump-biden-election-map/↩︎"
  },
  {
    "objectID": "posts/2023-08-25-workaround-to-link-rstudio-and-github/index.html",
    "href": "posts/2023-08-25-workaround-to-link-rstudio-and-github/index.html",
    "title": "Workaround to Linking RStudio and Github",
    "section": "",
    "text": "For this to work, you must have installed R and RStudio on your computer. Furthermore, you must have a Github.com account. I assume that you already created a repository on Github.com. All the screenshots in this post are taken on a laptop running Windows 10."
  },
  {
    "objectID": "posts/2023-08-25-workaround-to-link-rstudio-and-github/index.html#step-1",
    "href": "posts/2023-08-25-workaround-to-link-rstudio-and-github/index.html#step-1",
    "title": "Workaround to Linking RStudio and Github",
    "section": "Step 1",
    "text": "Step 1\nDownload Github Desktop from https://desktop.github.com"
  },
  {
    "objectID": "posts/2023-08-25-workaround-to-link-rstudio-and-github/index.html#step-2",
    "href": "posts/2023-08-25-workaround-to-link-rstudio-and-github/index.html#step-2",
    "title": "Workaround to Linking RStudio and Github",
    "section": "Step 2",
    "text": "Step 2\nLaunch Github Desktop and login using your Github credentials."
  },
  {
    "objectID": "posts/2023-08-25-workaround-to-link-rstudio-and-github/index.html#step-4",
    "href": "posts/2023-08-25-workaround-to-link-rstudio-and-github/index.html#step-4",
    "title": "Workaround to Linking RStudio and Github",
    "section": "Step 4",
    "text": "Step 4\nAuthorize Github Desktop from Github.com opened in your browser."
  },
  {
    "objectID": "posts/2023-08-25-workaround-to-link-rstudio-and-github/index.html#step-5",
    "href": "posts/2023-08-25-workaround-to-link-rstudio-and-github/index.html#step-5",
    "title": "Workaround to Linking RStudio and Github",
    "section": "Step 5",
    "text": "Step 5\nGo back to Github Desktop. You will see the following welcome screen. Select the second option."
  },
  {
    "objectID": "posts/2023-08-25-workaround-to-link-rstudio-and-github/index.html#step-6",
    "href": "posts/2023-08-25-workaround-to-link-rstudio-and-github/index.html#step-6",
    "title": "Workaround to Linking RStudio and Github",
    "section": "Step 6",
    "text": "Step 6\nSelect the repo to clone. Also set the path where this repo will be cloned on your computer. I suggest creating a folder structure such as “MSDA/Fall 2023/Data Visualization” and then point Github Desktop to this directly. This way, the DA6233-2023 folder will get added to this directory.\n\n\n\n\n\nAfter successful repo cloning you should see a similar windows:"
  },
  {
    "objectID": "posts/2023-08-25-workaround-to-link-rstudio-and-github/index.html#step-7",
    "href": "posts/2023-08-25-workaround-to-link-rstudio-and-github/index.html#step-7",
    "title": "Workaround to Linking RStudio and Github",
    "section": "Step 7",
    "text": "Step 7\nFinally, open RStudio and create a new project from File &gt; New Project. Select the second option labeled “Existing Directory”. This is because we will use the same directory that we pointed Github Desktop to in Step 6.\n\n\n\n\n\nProvide the full link to the project directory and click “Create Project.” That’s it!"
  },
  {
    "objectID": "posts/2020-11-30-mf-performance/index.html",
    "href": "posts/2020-11-30-mf-performance/index.html",
    "title": "Persistence in Mutual Fund Performance",
    "section": "",
    "text": "Mark Carhart’s classic 1997 Journal of Finance paper is highly cited for the momentum factor used in asset pricing models. Carhart (1997) augmented Fama-French 3-factor model (Fama and French 1993) with a factor that accounts for the momentum anomaly identified by Jegadeesh and Titman (1993).\nI read this article for the first time in spring 2007 while taking a class on Capital Markets Research at SUNY-Binghamton taught by Srini Krishnamurthy. Although this article is heavily cited for introducing the momentum factor, the topic of the article is way more interesting. In a nutshell, the article shows that mutual fund managers may not be as skilled as commonly believed, and their performance can be explained away mostly by momentum trading strategies. Furthermore, there is no persistence in mutual fund performance. This means that if you decide to invest in a fund based on the last year’s returns, the chances are slim that the performance of the fund will persist in future!\nAlthough over the years I may have forgotten some of the details, Figure 1 from this paper is etched in my memory. From a purely data visualization perspective, it is a terrible plot. A 3-dimensional plot on 2-dimensional paper is no go. This is a static plot which means it lacks interactivity. Finally, this plot was printed in black and white! Yet, this is an amazing plot. I reproduce it here and explain why this is so insightful.\nThis plot is based on one-year gross returns of mutual fund. Carhart first ranked these funds in a descending order of the annual returns and then created 10 deciles. Accodingly, Decile 1 contains top 10% funds by returns and Decile 10 has the poorest performing 10% funds. Next he tracks these funds in the succeeding year, where he again sorts them in one-year returns deciles. The plot above shows the transition probability of a fund ranked in decile \\(i\\) in year \\(t\\) moving to decile \\(j\\) in year \\(t+1\\). Formally, he is plotting the following conditional probability: \\(P(j|i)\\). As some of these funds may not survive the next year, \\(j \\in [Decile 1,..., Decile 10, Dead]\\).\nIf mutual funds managers are skilled and their performance is consistent, one would expect that \\(P(j|i) ~ 1\\) when \\(j = i\\). However, the plot above implies something like \\(P(j|i) ~ U(0, 1)\\) meaning a mutual fund may transition freely from one decile in a year to any decile the next year! That’s quite insightful."
  },
  {
    "objectID": "posts/2020-11-30-mf-performance/index.html#improving-figure-1",
    "href": "posts/2020-11-30-mf-performance/index.html#improving-figure-1",
    "title": "Persistence in Mutual Fund Performance",
    "section": "Improving Figure 1",
    "text": "Improving Figure 1\nMy objective of writing this post is to recreate this data visualization so that the insights are more apparent. In order to do that, I am creating four plots as follows:\n\nThe first plot is a 2-dimensional heatmap. This is a better representation because it will map the transition probabilities to colors rather than the height of the bars.\nThe second plot uses echarts, a D3 library in JavaScript. I am using an R wrapper called echarts4r. This plot will make this an interactive 3-dimensional visualization.\nI recreate the 3-dimensinoal bar plot using another D3 library called highcharts. I am using an R wrapper called highcharter. With this, I could add different colors to the bars but at the same time, I lost the ability to rotate the plot. I correct it in the last plot.\nIn this plot, I use a Shiny app that adds rotation to the plot made using highcharter.\n\n\nI used a mutual funds data set spanning 1961 to 2019. In my plots, the deciles are reversed. I created the deciles by sorting returns in ascending order. So Decile 1 consists of poorly performing mutual funds while Decile 10 consists of top performing mutual funds. Additionally, in my data I did not have a quick way to determine dead mutual funds so I don’t have that category. I just used the reported raw returns without adjusting them for the management expenses."
  },
  {
    "objectID": "posts/2020-11-30-mf-performance/index.html#heatmap",
    "href": "posts/2020-11-30-mf-performance/index.html#heatmap",
    "title": "Persistence in Mutual Fund Performance",
    "section": "Heatmap",
    "text": "Heatmap\nThe first plot we will create is a heatmap.\n\n\n\n\n\n\n\nIn this heatmap, things look a bit more interesting. We can see that the primary and secondary diagonal elements are darker than the off diagonal elements. Following the standard notations in linear algbra, the primary diagonal runs from top left to bottom right. The dark rectangles towards the ends of the diagonal suggest that there is a higher transition probability from low deciles to high deciles and vice versa. The secondary diagonal runs from bottom left to top right. This diagonal captures persistence in performance. The elements on this diagonal are darker suggesting some evidence of persistence. However, the highest probability is 22% for Decile 1. For Decile 9 and 10, these are 13% and 19% respectively. Thus, the evidence for persistence is weak at best. ALso note that although I extended the time period under investigation to 2019, the results are remarkably similar to what Carhart reported in 1997!"
  },
  {
    "objectID": "posts/2020-11-30-mf-performance/index.html#dimensional-bar-plot-using-echarts4r",
    "href": "posts/2020-11-30-mf-performance/index.html#dimensional-bar-plot-using-echarts4r",
    "title": "Persistence in Mutual Fund Performance",
    "section": "3-Dimensional Bar Plot using echarts4r",
    "text": "3-Dimensional Bar Plot using echarts4r\nI wanted to more closely replicate Carhart’s visualization. I decided to use echarts4r to recreate this plot because this package has an easy way to create 3-d plots. However, it has a few limitations as well. R package has only a few functionalities of the original echarts library. I am not proficient in JavaScript so I can’t make finer changes to the plot. Let’s give it a shot. Note that the X axis has the deciles in year t, Y axis has the deciles in year t+1, and the Z axis has the probabilities.\n\n\n\n\n\n\nThis plot is not bad at all! It has a lot of details and we can rotate the plot to get an understanding of the tranistion probabilities. Ideally I would have loved to assign the same color to the columns belonging to a decile in year t+1 but I found it difficult to achieve. I will keep exploring this."
  },
  {
    "objectID": "posts/2020-11-30-mf-performance/index.html#dimensional-highcharter-bar-plot",
    "href": "posts/2020-11-30-mf-performance/index.html#dimensional-highcharter-bar-plot",
    "title": "Persistence in Mutual Fund Performance",
    "section": "3-Dimensional highcharter Bar Plot",
    "text": "3-Dimensional highcharter Bar Plot\nAs an alternative I decided to use highcharter library which is a wrapper for highcharts. However, there is no easy way to rotate the plot. So I am going to show you two plots - one without rotation and the other with. The one with rotation is actually hosted on Shinyapps.io as a Shiny app.\nNote that in both the plots, the same color is applied to the bars for the decile in year t+1. This is shown in the legend at the bottom of the plots.\n\nStatic highcharter plot\n\n\n\n\n\n\n\nWith highcharter, I could assign distinct colors to the deciles. This makes it easier compared to echarts4r to explore transition probabilities. However, we can’t rotate this plot.\nHow to read this plot? The front row of columns belong to Decile 1 from year t+1. From left to right, we can see the Decile 1 to Decile 10 from year t. Thus, the left most column is the probability that a fund will stay in Decile 1 the next year. The second column from left is the probability that a fund will move from Decile 1 in year t to Decile 2 in year t+1. The second row of columns belongs to Decile 2 from year t+1 and so on."
  },
  {
    "objectID": "posts/2020-11-30-mf-performance/index.html#draggable-highcharter-bar-plot",
    "href": "posts/2020-11-30-mf-performance/index.html#draggable-highcharter-bar-plot",
    "title": "Persistence in Mutual Fund Performance",
    "section": "Draggable highcharter bar plot",
    "text": "Draggable highcharter bar plot\nI decided to host my plot on Shinyapps.io as a Shiny app, which made it possible to drag or rotate the bar plot. Now you are free to play with it! The way to read the plot is the same as the static plot.\nCheck out the webapp here: https://malshe.shinyapps.io/mf-performance/"
  },
  {
    "objectID": "posts/2020-11-30-mf-performance/index.html#conclusion",
    "href": "posts/2020-11-30-mf-performance/index.html#conclusion",
    "title": "Persistence in Mutual Fund Performance",
    "section": "Conclusion",
    "text": "Conclusion\nFigure 1 from Carhart’s article is insightful but it suffers from several issues. Using modern technology, we can recreate this figure in multiple ways. I show four ways to recreate it using JavaScript based libraries in R. Although I used data spanning 1961 to 2019, the conclusions from Carhart’s article remain the same. This shows that his findings were really robust."
  },
  {
    "objectID": "posts/2020-12-02-election-donuts-pics/index.html",
    "href": "posts/2020-12-02-election-donuts-pics/index.html",
    "title": "Donut Chart and Geofacets with Images",
    "section": "",
    "text": "For the background and more details on this plot, please check out my earlier blog post: https://dataviz.school/posts/2020-11-20–us-election-donut/"
  },
  {
    "objectID": "posts/2020-12-02-election-donuts-pics/index.html#getting-the-data",
    "href": "posts/2020-12-02-election-donuts-pics/index.html#getting-the-data",
    "title": "Donut Chart and Geofacets with Images",
    "section": "Getting the data",
    "text": "Getting the data\nAs of the date of this writing (21st November 2020), the results of the US Presidential elections have not tallied. The counting is still going on in a few states. However, it is unlikely that the results will change significantly from this point onward. I decided to get data from this Github repo, which scrapes data from NYT. The data is at county-level: https://github.com/favstats/USElection2020-NYT-Results"
  },
  {
    "objectID": "posts/2020-12-02-election-donuts-pics/index.html#final-plot",
    "href": "posts/2020-12-02-election-donuts-pics/index.html#final-plot",
    "title": "Donut Chart and Geofacets with Images",
    "section": "Final plot",
    "text": "Final plot\nThis is the plot I created. I have used Biden and Trump pictures from www.pixabay.com. Check it out for a lot of free, attribution-free images. I also tried using Trump and Biden icons but it did not work well. I got Trump and Biden icons from here respectively:\nTrump icon Biden icon\nThese are free to use with attribution."
  },
  {
    "objectID": "posts/2020-12-02-election-donuts-pics/index.html#code-to-create-the-plot",
    "href": "posts/2020-12-02-election-donuts-pics/index.html#code-to-create-the-plot",
    "title": "Donut Chart and Geofacets with Images",
    "section": "Code to create the plot",
    "text": "Code to create the plot\nHere is the code to recreate these plots. Note that I am assuming that you are using the code to prepare data from my previous post.\nThe main challenge in creating this plot is mismatch of the coordinate system. The donuts are created using polar coordinates. It’s not possible to overlay images on top of those donuts in ggplot2. I decided to use a workaround, which I have successfully used in the past to create dataviz for my wife. I first created two separate plots. First plot is the main donut chart which I created previously. The second plot is just a facet plot of Biden and Trump images. Next I used cowplot package to overlay these two plots on top of each other. It may sound pretty easy but it took me a lot of time to align those two plots perfectly. The key was to use coord_fixed() in the second plot.\n\nCreate a data set with images\nHere I am creating a data set with a column containing links to either Biden or Trump images. I am also making sure that I retain the winner in each state and DC. The resulting data has 51 rows. Note that in the plot I use image2 variable to overlay images. If you instead want the icons, use image in geom_image() in the code below.\n\ndt3 &lt;- dt2 %&gt;%\n  arrange(state, -votes) %&gt;% \n  group_by(state) %&gt;% \n  filter(row_number() == 1) %&gt;% \n  ungroup() %&gt;% \n  mutate(image = case_when(Candidate == \"Biden\" ~ \"https://github.com/ashgreat/dataviz-blog/raw/main/Images/joe-biden.png\",\n                           Candidate == \"Trump\" ~ \"https://github.com/ashgreat/dataviz-blog/raw/main/Images/donald-trump.png\"),\n         image2 = case_when(Candidate == \"Biden\" ~ \"https://github.com/ashgreat/dataviz-blog/raw/main/Images/biden-small-pixabay.png\",\n                           Candidate == \"Trump\" ~ \"https://github.com/ashgreat/dataviz-blog/raw/main/Images/trump-small-pixabay.png\")\n         )\n\n\n\nCreate donut charts\nThis code is basically copied from the previous post.\n\ng3 &lt;- dt2 %&gt;% \n  group_by(state) %&gt;% \n  arrange(Candidate) %&gt;% \n  mutate(ymax = cumsum(per_votes),\n         ymin = ifelse(row_number() == 1, 0, lag(ymax)),\n         ypos = (ymin + ymax) / 2) %&gt;% \n  ungroup() %&gt;% \n  ggplot(aes(ymin = ymin, ymax = ymax, xmin = 3, xmax = 4)) +\n  geom_rect(aes(fill = Candidate)) +\n  geom_text(x = 5, \n             aes(y = ypos, \n                 label = formattable::percent(round(per_votes, 2), digits = 0)),\n             size = 2, color = \"white\") +\n  coord_polar(theta = \"y\") +\n  facet_geo(~state) +\n  scale_fill_manual(values = c(\"#0066f2\", \"#e6f1fd\", \"#ff0000\")) +\n  theme_void()+\n  xlim(-1, 5) +\n  labs(caption = \"Ashwin Malshe \\nhttps://dataviz.school\",\n       subtitle = \" \") +\n  theme(legend.text = element_text(family = \"proxima\", size = 10, color = \"white\"),\n        legend.title = element_blank(),\n        legend.direction = \"horizontal\",\n        legend.position = c(0.2, 1),\n        plot.caption = element_text(family = \"proxima\", size = 10, hjust = 0.95,\n                                    margin = margin(0, 0, 5, 0, \"pt\"),\n                                    face = \"bold\", color = \"#69fffb\"),\n        strip.text = element_text(family = \"proxima\", size = 9, color = \"white\",\n                                  margin = margin(0, 0, 5, 0, \"pt\")),\n        strip.background = element_blank(),\n        plot.background = element_rect(fill = \"#2e3440\", color = NA),\n        panel.background = element_rect(fill = \"#2e3440\", color = NA))\n\n\n# Print the plot\n\ng3\n\n\n\nCreate the plot of images\nThis is the plot that will be layered on top of the donut chart. Note geon_image() from ggimage package.\n\ng4 &lt;- ggplot(dt3) +\n  facet_geo(~state) +\n  ggimage::geom_image(aes(x = 0.5, y = -1, image = image), size = 0.5) +\n  theme_void()+\n  xlim(0, 1) +\n  coord_fixed() + # This is critical!\n  theme(\n        strip.background = element_blank(),\n        strip.text = element_blank(),\n        panel.background = element_blank(),\n        plot.background = element_blank())\n\n\n\nSuperimposing the two plots\nThis was easy. I just layered g4 on g3 using align_plots() from the fatnastic package cowplot. Finally, I plotted them and saved in an object g5. Note that if you use the same font as the one I used here, cowplot will generate many error messages. Ignore them as it won’t affect your output.\n\naligned_plots &lt;- cowplot::align_plots(g3, g4, align=\"hv\", greedy = FALSE)\n\ng5 &lt;- ggdraw(aligned_plots[[1]]) +\n  draw_plot(aligned_plots[[2]])\n\nI hope you enjoyed this post!"
  },
  {
    "objectID": "posts/2020-11-20--us-election-donut/index.html",
    "href": "posts/2020-11-20--us-election-donut/index.html",
    "title": "Donut Chart and Geofacets",
    "section": "",
    "text": "There are many different ways people have visualized US presidential elections results on the US map. One critical drawback in many of these visualizations is that they show only the results for the winners. I wanted to show the vote percentages for Biden, Trump, and other candidates. These can be easily captured using a pie chart or a donut chart. However, superimposing the charts on the US map is difficult because the sizes of the states vary quite a lot. So I decided to use the fantastic geofacet package, which makes this task easy."
  },
  {
    "objectID": "posts/2020-11-20--us-election-donut/index.html#getting-the-data",
    "href": "posts/2020-11-20--us-election-donut/index.html#getting-the-data",
    "title": "Donut Chart and Geofacets",
    "section": "Getting the data",
    "text": "Getting the data\nAs of the date of this writing (21st November 2020), the results of the US Presidential elections have not tallied. The counting is still going on in a few states. However, it is unlikely that the results will change significantly from this point onward. I decided to get data from this Github repo, which scrapes data from NYT. The data is at county-level: https://github.com/favstats/USElection2020-NYT-Results\nI am reading the data directly into R.\n\ndt &lt;- readr::read_csv(\"https://bit.ly/2UO2Zyp\")"
  },
  {
    "objectID": "posts/2020-11-20--us-election-donut/index.html#cleaning-up-the-data",
    "href": "posts/2020-11-20--us-election-donut/index.html#cleaning-up-the-data",
    "title": "Donut Chart and Geofacets",
    "section": "Cleaning up the data",
    "text": "Cleaning up the data\nI clean up the data in multiple steps using dplyr:\n\nGet total votes and absentee votes for all the contentstansts other than Trump and Biden.\nstate names have - in place of a space. For instance, New York is written “as new-york”. Replace all the hyphens with spaces.\nUse title case for all the state names. This screws up District of Columbia by capitalizing “O” in of. Fix that.\nSummarize the votes at the state level.\nReshape the data using pivot_longer. This will lead to only five columns.\nFinally, calculate the percentage votes.\n\n\n\nAbsentee votes for some states were negative so I decided not to use absentee votes in any visualization.\n\n# Load the libraries\npacman::p_load(tidyverse, showtext, geofacet)\n\ndt2 &lt;- dt %&gt;% \n  mutate(\n         Others = votes  - (results_trumpd + results_bidenj),\n         Others_ab = absentee_votes - (results_absentee_trumpd + results_absentee_trumpd),\n         state = stringr::str_replace_all(state, \"-\", \" \"),\n         state = stringr::str_to_title(state),\n         state = ifelse(state == \"District Of Columbia\", \"District of Columbia\",  state)\n         ) %&gt;% \n  group_by(state) %&gt;% \n  summarize(Trump_votes = sum(results_trumpd, na.rm = TRUE),\n            Trump_abvotes = sum(results_absentee_trumpd, na.rm = TRUE),\n            Biden_votes = sum(results_bidenj, na.rm = TRUE),\n            Biden_abvotes = sum(results_absentee_bidenj, na.rm = TRUE),\n            Others_votes = sum(Others , na.rm = TRUE),\n            Others_abvotes = sum(Others_ab , na.rm = TRUE),\n            .groups = \"drop\") %&gt;% \n  pivot_longer(cols = c(Trump_votes, Biden_votes, Others_votes,\n                        Trump_abvotes, Biden_abvotes, Others_abvotes),\n               names_to = c(\"Candidate\", \".value\"),\n               names_pattern = \"(.+)_(.+)\") %&gt;% \n  group_by(state) %&gt;% \n    mutate(per_votes = votes / sum(votes)) %&gt;% \n  ungroup()"
  },
  {
    "objectID": "posts/2020-11-20--us-election-donut/index.html#creating-the-plots",
    "href": "posts/2020-11-20--us-election-donut/index.html#creating-the-plots",
    "title": "Donut Chart and Geofacets",
    "section": "Creating the plots",
    "text": "Creating the plots\nI am starting off by importing Proxima Nova Condensed font. If you don’t have this font, use whichever font you like. I recommend using a condensed font. A popular alternative is Robot Condensed.\nI also start showtext.\n\nfont_add(\"proxima\", here::here(\"Icons\", \"ProximaNovaCond-Regular.otf\"))\nshowtext_auto()\n\nNow we are reading to create the plot. Recall that I am overlaying donut charts on the US map but instead of actually using the map, I will instead use geofacet package. This allows us to position facets in the general location of states on the US map.\nI like this package because due to the distortion introduced by the map projections, many states on the US map look smaller than they are. A few states are indeed small. Also, Alaska and Hawaii are so far away from the continental US that it becomes difficult to show them in one map unless we make some adjustments.\nI will show you two different methods to create this graph.\n\nMethod 1\nIn this method, I will first create a bar graph and then use polar coordinates to convert them into a pie chart. Next, using xlim() function, I will convert the pie chart into a donut chart. Play around with the values inside xlim in the code below to see how the plot changes.\nThis plot will not put the vote percentages as labels on the plot, which will make the plots a bit less interesting. In the next method I will show you how to put the value labels.\n\ng1 &lt;- dt2 %&gt;% \n  group_by(state) %&gt;% \n  arrange(Candidate) %&gt;% \n  ungroup() %&gt;% \n  ggplot(aes(x = 1.4, y = per_votes, fill = Candidate)) +\n  geom_col(color = \"white\", width = 0.7) +\n  coord_polar(theta = \"y\", start = 0) +\n  facet_geo(~state) +\n  scale_fill_manual(values = c(\"#0066f2\", \"#e9c41d\", \"#ff0000\")) +\n  theme_void()+\n  xlim(0, 2) +\n  labs(caption = \"Ashwin Malshe \\nhttps://dataviz.school\",\n       subtitle = \" \") +\n  theme(legend.text = element_text(family = \"proxima\", size = 10),\n        legend.title = element_blank(),\n        legend.direction = \"horizontal\",\n        legend.position = c(0.2, 1),\n        plot.caption = element_text(family = \"proxima\", size = 10, hjust = 0.95,\n                                    margin = margin(0, 0, 5, 0, \"pt\"),\n                                    face = \"bold\", color = \"#1500f4\"),\n        strip.text = element_text(family = \"proxima\", size = 9,\n                                  margin = margin(0, 0, 5, 0, \"pt\"))) \n\n# Print the plot\ng1\n\n\n\n\nIf you like it, save the plot using ggsave() function.\n\n\nMethod 2\nIn the second method, I will use geom_rect to add rectangles first and then use polar coordinates to create a pie chart. Once again he limits specified inside xlim() will convert it into a donut chart.\n\ng2 &lt;- dt2 %&gt;% \n  group_by(state) %&gt;% \n  arrange(Candidate) %&gt;% \n  mutate(ymax = cumsum(per_votes),\n         ymin = ifelse(row_number() == 1, 0, lag(ymax)),\n         ypos = (ymin + ymax) / 2,\n         ypos = ifelse(state == \"District of Columbia\" & Candidate == \"Trump\",\n                       0.05, ypos)) %&gt;% \n  ungroup() %&gt;% \n  ggplot(aes(ymin = ymin, ymax = ymax, xmin = 3, xmax = 4, fill = Candidate)) +\n  geom_rect() +\n  geom_text(x = 1.8, \n             aes(y = ypos, label = formattable::percent(round(per_votes, 2), digits = 0)),\n             size = 2) +\n  coord_polar(theta = \"y\") +\n  facet_geo(~state) +\n  scale_fill_manual(values = c(\"#0066f2\", \"#e6f1fd\", \"#ff0000\")) +\n  theme_void()+\n  xlim(-1, 4) +\n  labs(caption = \"Ashwin Malshe \\nhttps://dataviz.school\",\n       subtitle = \" \") +\n  theme(legend.text = element_text(family = \"proxima\", size = 10),\n        legend.title = element_blank(),\n        legend.direction = \"horizontal\",\n        legend.position = c(0.2, 1),\n        plot.caption = element_text(family = \"proxima\", size = 10, hjust = 0.95,\n                                    margin = margin(0, 0, 5, 0, \"pt\"),\n                                    face = \"bold\", color = \"#1500f4\"),\n        strip.text = element_text(family = \"proxima\", size = 9,\n                                  margin = margin(0, 0, 5, 0, \"pt\")))\n\n\n# Print the plot\n\ng2\n\n\n\n\nAnother version of the same plot with a different background.\n\ng3 &lt;- dt2 %&gt;% \n  group_by(state) %&gt;% \n  arrange(Candidate) %&gt;% \n  mutate(ymax = cumsum(per_votes),\n         ymin = ifelse(row_number() == 1, 0, lag(ymax)),\n         ypos = (ymin + ymax) / 2,\n                  ypos = ifelse(state == \"District of Columbia\" & Candidate == \"Trump\",\n                       0.05, ypos)) %&gt;% \n  ungroup() %&gt;% \n  ggplot(aes(ymin = ymin, ymax = ymax, xmin = 3, xmax = 4, fill = Candidate)) +\n  geom_rect() +\n  geom_text(x = 1.8, \n             aes(y = ypos, \n                 label = formattable::percent(round(per_votes, 2), digits = 0)),\n             size = 2, color = \"white\") +\n  coord_polar(theta = \"y\") +\n  facet_geo(~state) +\n  scale_fill_manual(values = c(\"#0066f2\", \"#e6f1fd\", \"#ff0000\")) +\n  theme_void()+\n  xlim(-1, 4) +\n  labs(caption = \"Ashwin Malshe \\nhttps://dataviz.school\",\n       subtitle = \" \") +\n  theme(legend.text = element_text(family = \"proxima\", size = 10, color = \"white\"),\n        legend.title = element_blank(),\n        legend.direction = \"horizontal\",\n        legend.position = c(0.2, 1),\n        plot.caption = element_text(family = \"proxima\", size = 10, hjust = 0.95,\n                                    margin = margin(0, 0, 5, 0, \"pt\"),\n                                    face = \"bold\", color = \"#a3be8c\"),\n        strip.text = element_text(family = \"proxima\", size = 9, color = \"white\",\n                                  margin = margin(0, 0, 5, 0, \"pt\")),\n        plot.background = element_rect(fill = \"#2e3440\", color = NA),\n        panel.background = element_rect(fill = \"#2e3440\", color = NA) )\n\n\n# Print the plot\n\ng3"
  },
  {
    "objectID": "posts/2020-12-12-ggorce/index.html",
    "href": "posts/2020-12-12-ggorce/index.html",
    "title": "Easy pie charts and donut charts with ggforce",
    "section": "",
    "text": "In the previous post, I created a geofacet of donut charts using coord_polar() function from ggplot2. You can also create pie charts in the same way. However, there are two issues with this method.\nIn this post I show you how to overcome both these issues by using a relatively unknown package called ggforce. The developer of this package, Thomas Lin Pedersen, is in the core development team for ggplot2. He is also the author of gganimate and patchwork packages.\nWe will use geom_arc_bar() function from ggforce to create pie charts and donut charts. Since it uses Cartesian coordinate system, including images in the plot is super simple."
  },
  {
    "objectID": "posts/2020-12-12-ggorce/index.html#pie-chart",
    "href": "posts/2020-12-12-ggorce/index.html#pie-chart",
    "title": "Easy pie charts and donut charts with ggforce",
    "section": "Pie chart",
    "text": "Pie chart\nLet’s make a pie chart first. With two categories, a pie chart is not a bad choice for visualization. There is not a lot to explain in the code below. Both pie and donut charts are circles. To plot a circle, we need only three parameters. We need the x and y coordinates of the center of the circle and we need the radius. A donut chart requires one more parameter. Imagine a donut as an image with two concentric cirles. So for a donut chart, we need to provide the radius of the inner circle as well.\ngeom_arc_bar() can be used for making pie charts and donut charts. It requires an aes() function with the following arguments for positioning circles:\nx0: X coordinate of the center of the circle\ny0: Y coordinate of the center of the circle\nr0: Radius of the inner circle\nr: Radius of the outer circle\nThe other arguments, amount and fill are self explanatory. The variable mapped to amount will decide the size of the pie. In Tableau terminology, this will be mapped to the angle of the pie or donut.\nstat = \"pie\" specifies the that we want a pie chart. When r0 = 0, we get a pie chart. When r0 &gt; 0 we get the inner circle, which results in a donut chart.\nApart from geom_arc_bar() you also need coord_fixed(). This is required to make sure that there is no scaling along the X and Y axis and you indeed get a circle. Otherwise you will get an oval rather than a circle.\nHere I set x0 and y0 both to 0. Of course, this is not a requirement and it will change based on the complexity of the visualization you are making. It’s just the position of the circle on X and Y axes. Next, I set r = 1. Once again, it depends on the context and complexity of your visualization.\n\nggplot(dt) +\n  geom_arc_bar(aes(x0 = 0, y0 = 0, r0 = 0, r = 1, \n                   amount = electoral_votes, \n                   fill = candidate), \n               stat = 'pie',\n               color = \"white\") +\n  geom_label(x = c(0.5, -0.5), y = c(-0.3, 0.3), aes(label = electoral_votes)) +\n  scale_fill_manual(values = c(\"#004BA8\", \"#e63946\")) +\n  theme_void() + \n  coord_fixed() +\n  theme(legend.position = \"none\")\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n\n\n\n\n\nThis is a nice pie chart. I positioned the labels such that they are on a roughly 135º line."
  },
  {
    "objectID": "posts/2020-12-12-ggorce/index.html#donut-chart",
    "href": "posts/2020-12-12-ggorce/index.html#donut-chart",
    "title": "Easy pie charts and donut charts with ggforce",
    "section": "Donut chart",
    "text": "Donut chart\nNow let’s make the donut chart. The code below looks almost the same as the previous code except we have set r0 = 0.8. You will also have to adjust the label positions, which I did by doing some trial and error.\n\nggplot(dt) +\n  geom_arc_bar(aes(x0 = 0, y0 = 0, r0 = 0.8, r = 1, \n                   amount = electoral_votes, \n                   fill = candidate), \n               stat = 'pie',\n               color = \"white\") +\n  geom_label(x = c(0.85, -0.85), y = c(-0.3, 0.3), aes(label = electoral_votes)) +\n  scale_fill_manual(values = c(\"#004BA8\", \"#e63946\")) +\n  theme_void() + \n  coord_fixed() +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "posts/2020-12-12-ggorce/index.html#donut-chart-with-image",
    "href": "posts/2020-12-12-ggorce/index.html#donut-chart-with-image",
    "title": "Easy pie charts and donut charts with ggforce",
    "section": "Donut chart with image",
    "text": "Donut chart with image\nThe two graphs above solved the first issue I identified — these two graphs are much easier and intuitive to make compared to using coord_polar(). Next, let’s include an image in the donut chart. I recommend finding an image using Google Images, Pixabay, or Unsplash. I also found that making the image square makes adding it in the donut chart much easier. You can do it in Microsoft Paint in Windows and Preview on Mac.\n\nggplot(dt) +\n  geom_arc_bar(aes(x0 = 0, y0 = 0, r0 = 0.8, r = 1, \n                   amount = electoral_votes, \n                   fill = candidate), \n               stat = 'pie',\n               color = \"white\") +\n  geom_label(x = c(0.85, -0.85), y = c(-0.3, 0.3), aes(label = electoral_votes)) +\n  annotation_raster(png::readPNG(here::here(\"Images\", \"biden-pixabay-square.png\")),\n                    xmin = -0.55, xmax = 0.55, ymin = -0.55, ymax = 0.55) +\n  scale_fill_manual(values = c(\"#004BA8\", \"#e63946\")) +\n  theme_void() + \n  coord_fixed() +\n  labs(title = \"2020 US Presidential Elections Electoral Votes\") +\n  theme(legend.position = \"none\",\n        plot.title = element_text(color = \"white\", hjust = 0.5),\n        plot.background = element_rect(fill = \"#1d3557\"),\n        panel.background = element_rect(fill = \"#1d3557\"),\n        panel.border = element_blank())"
  },
  {
    "objectID": "posts/2023-10-26-homework-3-2023/homework-3-2023.html",
    "href": "posts/2023-10-26-homework-3-2023/homework-3-2023.html",
    "title": "Homework 3 - 2023",
    "section": "",
    "text": "Before you begin, note that, in the header, the output format of this document is html_notebook. When you save this file, it automatically creates another file with the same file name but with .nb.html extension in the same directory. This is the file you will submit as your homework solution along with the .Rmd file.\nWarnings:\nIf you delete nb.html file, you may have to create a new .Rmd file and restart from there. If you knit your .Rmd file to html, you will not be able to retain any of the interactivity in the plots. This means the TA will not be able to grade you!\nThe objective of this homework is to give you more practice on interactive visualizations using plotly and highcharter.\nAs always, recreate these visualizations exactly. Q1 uses plotly while Q2-Q5 use highcharter."
  },
  {
    "objectID": "posts/2023-10-26-homework-3-2023/homework-3-2023.html#q1-3-points",
    "href": "posts/2023-10-26-homework-3-2023/homework-3-2023.html#q1-3-points",
    "title": "Homework 3 - 2023",
    "section": "Q1 (3 points)",
    "text": "Q1 (3 points)\nUse mpg data set from ggplot2 to create a static visualization and then use ggplotly() to create a limited interactive plot.\nHint: You will need to supply only frame. No ids used.\n\n\n\n\n\n\nFor the next four questions, you will use highcharter."
  },
  {
    "objectID": "posts/2023-10-26-homework-3-2023/homework-3-2023.html#q2-3-points",
    "href": "posts/2023-10-26-homework-3-2023/homework-3-2023.html#q2-3-points",
    "title": "Homework 3 - 2023",
    "section": "Q2 (3 points)",
    "text": "Q2 (3 points)\nThis example creates a heatmap similar to the one shown here.\nUse mpg data and hchart() function. We want to create a heatmap of average highway mileage for different class and cyl. This plot removes all the observations with five cylinders or with 2seater class. Also note that I am treating cyl as a character (string) variable. This is essential for creating this plot.\nI am using hc_theme_538(). Furthermore, the default color in the heamap is blue, which I changed using hc_colorAxis() function that I used in the Week 10 heatmap."
  },
  {
    "objectID": "posts/2023-10-26-homework-3-2023/homework-3-2023.html#q3-3-points",
    "href": "posts/2023-10-26-homework-3-2023/homework-3-2023.html#q3-3-points",
    "title": "Homework 3 - 2023",
    "section": "Q3 (3 points)",
    "text": "Q3 (3 points)\nIn the above plot, the tooltip shows confusing information. Below, I modified the tooltip to present more information. The code is not at all complicated and relies on the tooltip code we used in Week 10.\nNext, I removed the X axis title and modified Y axis title.\nFinally, I added a title to the plot. Note how I used four different emojies related to cars. It doesn’t matter which car emojis you use as long as they are related to automobiles."
  },
  {
    "objectID": "posts/2023-10-26-homework-3-2023/homework-3-2023.html#q4-3-points",
    "href": "posts/2023-10-26-homework-3-2023/homework-3-2023.html#q4-3-points",
    "title": "Homework 3 - 2023",
    "section": "Q4 (3 points)",
    "text": "Q4 (3 points)\nFor this example, use a randomly selected subset of diamonds data set from ggplot2:\n\nset.seed(2020)\nd1 = diamonds[sample(nrow(diamonds), 1000),]\n\nNext use d1 to create the following plot.\nI have used hc_theme_flat() for this plot. Please use this theme for your plot too! You can add a theme to the plot using hc_add_theme() function. Wherever the word diamond appeared in the plot, I replaced it with the diamond emoji.\nPoint colors in this graph are mapped to clarity. Check out all the variables in this data set by typing ?diamonds in the console."
  },
  {
    "objectID": "posts/2023-10-26-homework-3-2023/homework-3-2023.html#q5-3-points",
    "href": "posts/2023-10-26-homework-3-2023/homework-3-2023.html#q5-3-points",
    "title": "Homework 3 - 2023",
    "section": "Q5 (3 points)",
    "text": "Q5 (3 points)\nUsing economics dataset from ggplot2, recreate the following line graph. Learn more about the variables in the dataset by typing ?economics in the console. Here, the Y axis is plotting unemployment.\nI used hc_theme_economist(). You can use any theme you want. You can check out the themes here."
  },
  {
    "objectID": "posts/2023-10-26-homework-3-2023/homework-3-2023.html#bonus-plot-not-graded",
    "href": "posts/2023-10-26-homework-3-2023/homework-3-2023.html#bonus-plot-not-graded",
    "title": "Homework 3 - 2023",
    "section": "Bonus plot (Not graded)",
    "text": "Bonus plot (Not graded)\nThis is the same plot as above except if you hover mouse pointer over the peak of unemployment, the tooltip will show more information. Once again, this is a simple trick and doesn’t require any advanced coding."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dataviz-Blog-Quarto",
    "section": "",
    "text": "My Reading List - 2024\n\n\n\n\n\n\nreading\n\n\nbooks\n\n\n\n\n\n\n\n\n\nFeb 5, 2024\n\n\nAshwin Malshe, Ashwin malshe\n\n\n\n\n\n\n\n\n\n\n\n\nCitation Frequency Table\n\n\n\n\n\n\nUtility\n\n\nShiny\n\n\n\n\n\n\n\n\n\nFeb 4, 2024\n\n\nAshwin Malshe, Ashwin Malshe\n\n\n\n\n\n\n\n\n\n\n\n\nAnalysis of MKT-3031 Spring 2024 Intro Survey\n\n\n\n\n\n\n\n\n\n\n\nJan 20, 2024\n\n\nAshwin Malshe\n\n\n\n\n\n\n\n\n\n\n\n\nHomework 3 - 2023\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2023\n\n\nAshwin Malshe\n\n\n\n\n\n\n\n\n\n\n\n\nWorkaround to Linking RStudio and Github\n\n\n\n\n\nMany students face difficulties in linking RStudio and Github. This post shows a workaround using Github Desktop application. \n\n\n\n\n\nAug 25, 2023\n\n\nAshwin Malshe\n\n\n\n\n\n\n\n\n\n\n\n\nInstalling R and RStudio\n\n\n\n\n\nThis is an old post about installing R and RStudio. It still works. \n\n\n\n\n\nAug 8, 2022\n\n\nAshwin Malshe\n\n\n\n\n\n\n\n\n\n\n\n\nVisualization of monthly NBER paper submissions\n\n\n\n\n\nThis post is a tidytuesday post. See the post below for the data source. \n\n\n\n\n\nOct 4, 2021\n\n\nAshwin Malshe\n\n\n\n\n\n\n\n\n\n\n\n\nKiyosaki Predicting Stock Market Crash\n\n\n\n\n\nRobert Kiyosaki is a legendary peronal finace guru, who has sold millions of copies of the book Rich Dad, Poor Dad. Yet, he is also a terrible predictor of the stock market movements! \n\n\n\n\n\nSep 27, 2021\n\n\nAshwin Malshe\n\n\n\n\n\n\n\n\n\n\n\n\nEasy pie charts and donut charts with ggforce\n\n\n\n\n\nI make pie charts and donut charts in ggplot2 using a combination of a bar plot and polar coordinates. This works fine but polar coordinates prevent using any other geoms or annotations that need Cartesian coordinates. For example, annoatation_raster doesn’t work with polar coordinates. ggforce solves this issue. \n\n\n\n\n\nDec 12, 2020\n\n\nAshwin Malshe\n\n\n\n\n\n\n\n\n\n\n\n\nDonut Chart and Geofacets with Images\n\n\n\n\n\nIn this post, I recreate the donut chart overlaid on geo facets. Based on a friend’s feedback, I now add pictures of winners of each state. \n\n\n\n\n\nDec 2, 2020\n\n\nAshwin Malshe\n\n\n\n\n\n\n\n\n\n\n\n\nPersistence in Mutual Fund Performance\n\n\n\n\n\nIn this article, I reproduce Figure 1 from Mark Carhart’s classic 1997 Journal of Finance article titled “On Persistence in Mutual Fund Performance”. The visualizations are created using highcharter and echarts4r packages. It is an interactive bar plot that shows that there is a very low persistence in the mutual fund performance. \n\n\n\n\n\nNov 30, 2020\n\n\nAshwin Malshe\n\n\n\n\n\n\n\n\n\n\n\n\nDonut Chart and Geofacets\n\n\n\n\n\nHow to combine a donut chart with geofacets in R. \n\n\n\n\n\nNov 19, 2020\n\n\nAshwin Malshe\n\n\n\n\n\n\n\n\n\n\n\n\nMapping Election Win Probabilities\n\n\n\n\n\n\nElections\n\n\nMap\n\n\n\nI show how to create a election map using ggplot2 \n\n\n\n\n\nOct 31, 2020\n\n\nAshwin Malshe\n\n\n\n\n\n\n\n\n\n\n\n\nPlotting Covid-19 Pandemic\n\n\n\n\n\n\ncovid\n\n\n\n\n\n\n\n\n\nMar 8, 2020\n\n\nAshwin Malshe, Ashwin Malshe\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/2024-01-20-MKT-3013-intro-survey/index.html",
    "href": "posts/2024-01-20-MKT-3013-intro-survey/index.html",
    "title": "Analysis of MKT-3031 Spring 2024 Intro Survey",
    "section": "",
    "text": "Thank you for taking the survey! As of the end of the day on January 19th, 97 students completed the intro survey. I created a few bar graphs to show you how you responded. Looks like there are a few brands emerging as clear winners!\n\nYou need to buy a new backpack for school. You’d most likely end up buying it in store or online?\n\n\n\n\n\n\n\n\nYou’re hungry for some “Mexican” fast food. You would head to Taco Cabana or Taco Bell?\n\n\n\n\n\n\n\n\nYour next car would be a US brand or a non-US brand?\n\n\n\n\n\n\n\n\nIdeally, your TV would get content from streaming or cable TV?\n\n\n\n\n\n\n\n\nYou need to have a chicken sandwich right now. Which place has the best one? Chick-fil-A or Popeye’s?\n\n\n\n\n\n\n\n\nif you were going grocery shopping for the week, you would most likely be going to H-E-B or Walmart?\n\n\n\n\n\n\n\n\nName one brand to which you’re fiercely loyal\n\n\n\n\n\n\n\n\nWhy are you taking this class? Pick the response(s) that best describes your reasoning\n\n\n\n\n\n\n\n\nHow much responsibility do you think you have for achieving the grade you want?"
  },
  {
    "objectID": "posts/2024-02-04-citation-frequency-table/index.html",
    "href": "posts/2024-02-04-citation-frequency-table/index.html",
    "title": "Citation Frequency Table",
    "section": "",
    "text": "This is a serverless app that lets you upload your Word document and outputs a table of citations frequencies, which you can download as csv and Excel formats. A serverless app runs entirely in your browser so your uploaded file stays on your computer. It does not leave the computer. You can use it even without an Internet connection once it is fully initialized in the browser.\nThe downside of a serverless app is that there will be some delay to initialize it, so please be patient!\nIt currently works only for the Journal of Marketing and the Journal of Marketing Research citation styles. Crucially, multiple citations should be separated by a semicolon. The app will return only the citations that are in parentheses. For example it will return (Tuli and Bharadwaj 2009) but can’t return Tuli and Bharadwaj (2009) because the regex for such a task is not easy. But, I am working on it. Please email me [ashwin.malshe at utsa.edu] in case you have any issues.\nOnce again, be patient the first time you initialize the app!\n#| standalone: true\n#| viewerHeight: 750\n\nlibrary(shiny)\nlibrary(officer)\nlibrary(stringr)\nlibrary(bslib)\nlibrary(DT)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nui = page_sidebar(\n  theme = bs_theme(bootswatch = \"cosmo\"),\n  title = \"\",\n  sidebar = sidebar(\n    fileInput(\"mydoc\", \"Upload a Word document (.docx extension)\"),\n    actionButton(\"run\", \"Get Frequency\")\n  ),\n  dataTableOutput(\"tab1\")\n)\n\nserver = function(input, output, session) {\n  \n  observeEvent(input$run, {\n    output$tab1 = renderDataTable({\n      \n      pattern_updated = \"\\\\(((?![^\\\\)]*accessed)[\\\\w\\\\s,.&;-]+? \\\\d{4}(?:;[\\\\w\\\\s,.&;-]+? \\\\d{4})*?)\\\\)\"\n      \n      texts = read_docx(isolate(input$mydoc$datapath)) |&gt; docx_summary()\n      full_text = paste(texts$text, collapse = \" \")\n      citations_updated = str_extract_all(full_text, pattern_updated)[[1]]\n      flat_citations = unlist(str_split(citations_updated, \";\"))\n      flat_citations = str_replace_all(flat_citations, \"e.g.,\", \"\") |&gt; \n        trimws()\n      Papers = str_replace_all(flat_citations, \"\\\\(|\\\\)\", \"\")\n      citation_counts_updated = table(Papers)\n      sorted_citations_updated = sort(citation_counts_updated, decreasing = TRUE) \n      \n      freq_tab = data.frame(sorted_citations_updated)\n      \n      return(freq_tab)\n      \n    },\n    caption = htmltools::tags$caption(style = 'caption-side: top; color:black;', \n                                      paste(\"Filename:\", isolate(input$mydoc$name))),\n    server = FALSE, # outputs entire table. Otherwise only the visible table.\n    extensions = 'Buttons', \n    options = list(dom = 'Bfrtip',\n                   buttons = list('copy',\n                                  list(extend='csv', filename = gsub(\"\\\\.docx?\\\\b\",\"\", isolate(input$mydoc$name))),\n                                  list(extend='excel', filename = gsub(\"\\\\.docx?\\\\b\",\"\", isolate(input$mydoc$name)))\n                                  ))\n    )# belongs to renderDataTable\n    \n  }) # belongs to observeEvent\n  \n}\n\n\n\nshiny::shinyApp(ui, server)"
  },
  {
    "objectID": "posts/2024-02-05-my-reading-list--2024/index.html",
    "href": "posts/2024-02-05-my-reading-list--2024/index.html",
    "title": "My Reading List - 2024",
    "section": "",
    "text": "This post serves as my public reading list for 2024. I mostly listen to books so this is really an audiobook listening list.\n\nJanuary 2024\n\nThe Fund: Ray Dalio, Bridgewater Associates, and the Unraveling of a Wall Street Legend by Rob Copland Amazon\n\nI really loved this book as it is well-researched and well-narrated. I did not know much about Ray Dalio or Bridgewater before, so I learned a lot.\n\nHidden Potential by Adam Grant Amazon\n\nThis is a short but nice book. I generally like feel good books and this is one of them.\n\nBarbarians at the Gate: The Fall of RJR Nabisco by Bryan Burrough and John Helyar Amazon\n\nThis book is a classic so I don’t think you need my recommendation for it. It’s a very long book (22 hours of listening!) and yet kept its grip on me all throughout. I always wanted to listen to it and it’s been in my Audible wishlist for years.\n\nThinking in Bets by Annie Duke Amazon\n\nAlthough this is a nice little book, I knew most of the research and arguments she brings to the table.\n\n\nFebruary 2024\n\nRange: Why Generalists Triumph in a Specialized World by David Epstein Amazon\n\nThis is my second time listening to this book. This book influenced me enough to start a new research project.\n\nLiar’s Poker by Michael Lewis Amazon\n\nI am currently listening to this audiobook. This is the first book by Michael Lewis, which made his famous. He is an exceptional storyteller. I might check out his “Going Infinite” although it received lukewarm reviews.\n… to be continued!"
  }
]